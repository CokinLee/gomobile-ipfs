---
name: Release
on:
  push:
    branches:
      - master

jobs:
  release_and_publish:
    name: Create release and publish
    runs-on: macos-latest
    timeout-minutes: 60
    env:
      GO_VERSION: 1.15.7
      GO_SHASUM: c384f00b35134572756e9ec99baf378116242783
    steps:
      - name: Checkout changes
        uses: actions/checkout@v2

      # - name: Install Go
      #   uses: actions/setup-go@v1
      #   with:
      #     go-version: 1.15.7

      # issue: https://github.com/golang/go/issues/42655
      - name: FIXME - install patched go - golang/go/isssues/42655
        id: fix42655
        uses: actions/cache@v1
        with:
          path: ~/go-patch
          key: |
            ${{ runner.os }}-${{ env.GO_VERSION }}-fix42655

      - name: FIXME - Build patched go
        if: steps.fix42655.outputs.cache-hit != 'true'
        run: |
          # download go 1.15.7 release
          wget --no-check-certificate --content-disposition \
              "https://github.com/golang/go/archive/go$GO_VERSION.tar.gz" \
              -O "/tmp/go$GO_VERSION.tar.gz"
          # check sum
          test "$(shasum /tmp/go$GO_VERSION.tar.gz | cut -d' ' -f1)" = "$GO_SHASUM"
          # extract
          tar -xf /tmp/go$GO_VERSION.tar.gz -C /tmp
          # move into HOME
          mv /tmp/go-go$GO_VERSION $HOME/go-patch
          # apply patch
          patch -d $HOME/go-patch -p1 < ./third-party/go/issue-42655/1d78139128d6d839d7da0aeb10b3e51b6c7c0749.patch
          # install
          cd $HOME/go-patch/src && \
              sed -i 'run.bash.old' 's/.*ulimit -[Hc].*//g' run.bash && \
              ./make.bash
        shell: bash

      - name: FIXME - set new go path bin
        run: |
          echo "GOROOT=$HOME/go-patch" >> $GITHUB_ENV
          echo "$HOME/go-patch/bin:$PATH" > $GITHUB_PATH
        shell: bash

      - name: Set GOPATH in env
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
          mkdir -p $(go env GOPATH)/src/github.com/ipfs-shipyard
          ln -s $PWD $(go env GOPATH)/src/github.com/ipfs-shipyard/gomobile-ipfs
        shell: bash

      - name: Set GOPATH in env
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
          mkdir -p $(go env GOPATH)/src/github.com/ipfs-shipyard
          ln -s $PWD $(go env GOPATH)/src/github.com/ipfs-shipyard/gomobile-ipfs
        shell: bash

      - name: Restore Go mod cache
        id: cache
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go/go.sum') }}

      - name: Install Go mod
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: go
        run: GO111MODULE=on go mod vendor

      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set TARGET_SDK in env
        run: |
          pip3 install -r packages/utils/manifest_get/requirements.txt
          export GET_BIN=packages/utils/manifest_get/manifest_get.py
          export GET_KEY=global.android.target_sdk_version
          echo "TARGET_SDK=$($GET_BIN $GET_KEY)" >> $GITHUB_ENV

      - name: Install Android SDK
        run:
          SDK_MAN=$HOME/Library/Android/sdk/tools/bin/sdkmanager;
          BTOOLS=$($SDK_MAN --list | grep "build-tools;$TARGET_SDK");
          BTOOL=$(echo $BTOOLS | tail -n1 | cut -d'|' -f1 | tr -d ' ');
          PLATFORMS=$($SDK_MAN --list | grep "platforms;android-$TARGET_SDK");
          PLATFORM=$(echo $PLATFORMS | tail -n1 | cut -d'|' -f1 | tr -d ' ');

          $SDK_MAN --install "$BTOOL" platform-tools "$PLATFORM" ndk-bundle
          > /dev/null

      - name: Update Cocoapods
        run: |
          gem update cocoapods cocoapods-trunk
          pod setup

      - name: Generate Android/iOS Bridge docs
        run: |
          gem install jazzy
          rm -rf docs/android docs/ios
          cd packages && make docgen

      - name: Create semantic-release config file
        run: |
          printf "module.exports = {
              plugins: [
                  '@semantic-release/commit-analyzer',
                  '@semantic-release/release-notes-generator',
                  '@semantic-release/github',
                  ['@semantic-release/changelog', {
                      'changelogFile': 'CHANGELOG.md',
                      'changelogTitle': '# Global Changelog',
                  }],
                  ['@semantic-release/git', {
                      'assets': ['CHANGELOG.md', 'docs'],
                      'message': 'docs: add docs and changelog generated by CI'
                  }],
              ],
            };" > .releaserc.js

      - name: Create github release and push docs
        id: semantic
        uses: cycjimmy/semantic-release-action@v2
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: GitHub Action
          GIT_AUTHOR_EMAIL: action@github.com
          GIT_COMMITTER_NAME: GitHub Action
          GIT_COMMITTER_EMAIL: action@github.com

      - name: Create Android keystore
        if: steps.semantic.outputs.new_release_published == 'true'
        working-directory: android
        env:
          ANDROID_KEYSTORE: ${{ secrets.ANDROID_KEYSTORE }}
        run:
          echo "$ANDROID_KEYSTORE" | openssl base64 -A -d > gomobile-ipfs.pfx

      - name: Setup iOS provisioning profile
        if: steps.semantic.outputs.new_release_published == 'true'
        env:
          IOS_PROFILE: ${{ secrets.IOS_PROFILE }}
          IOS_PROFILE_UUID: ${{ secrets.IOS_PROFILE_UUID }}
        run: |
          mkdir -p $HOME/Library/MobileDevice/Provisioning\ Profiles
          cd $HOME/Library/MobileDevice/Provisioning\ Profiles
          echo "$IOS_PROFILE" | openssl base64 -A -d \
            > "$IOS_PROFILE_UUID.mobileprovision"

      - name: Setup macOS keychain
        if: steps.semantic.outputs.new_release_published == 'true'
        working-directory: /tmp
        env:
          IOS_KEYSTORE: ${{ secrets.IOS_KEYSTORE }}
          IOS_KEYPASS: ${{ secrets.IOS_KEYPASS }}
          IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
          KEYCHAIN_PASS: ${{ secrets.KEYCHAIN_PASS }}
        run: |
          security create-keychain -p "$KEYCHAIN_PASS" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASS" build.keychain
          security set-keychain-settings build.keychain
          echo "$IOS_KEYSTORE" | openssl base64 -A -d > Gomobile-IPFS.p12
          echo "$IOS_CERTIFICATE" | openssl base64 -A -d > Gomobile-IPFS.cer
          security import Gomobile-IPFS.p12 \
            -t priv -f pkcs12 -P "$IOS_KEYPASS" -T /usr/bin/codesign
          security import Gomobile-IPFS.cer \
            -t cert -T /usr/bin/codesign
          security set-key-partition-list \
            -S apple-tool:,apple:,codesign: \
            -s -k "$KEYCHAIN_PASS" build.keychain

      - name: Publish Android/iOS packages and apps
        if: steps.semantic.outputs.new_release_published == 'true'
        working-directory: packages
        env:
          BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
          BINTRAY_KEY: ${{ secrets.BINTRAY_KEY }}
          BINTRAY_GPG_PASS: ${{ secrets.BINTRAY_GPG_PASS }}
          ANDROID_KEYPASS: ${{ secrets.ANDROID_KEYPASS }}
          COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
          GOMOBILE_IPFS_VERSION:
            ${{ steps.semantic.outputs.new_release_version }}
        run: make publish
